/*--------------------------------------------------------------------------------------------------------------------------------------------------
	A função Core decidirá quais os papeis executados para cada robo em um determinado tempo de jogo, a ideia é sempre ir atualizando as obrigações de cada robo de acordo com a situação atual do campo. A ideia principal é criar uma máquina de estados que represente o comportamento dos jogadores.
	
	A função Core possui 3 funções auxiliares que determinam por seus parâmetros qual é o melhor robô para assumir um determinado papel. 
	Primeiramente é escolhido o robo atacante, o qual deverá estar atrás da linha da bola e estar a menor distância possível da mesma, depois que o atacante é selecionado, ele não passará pela selação de goleiro nem standby na mesma iteração. Por segundo, é selecionado o Robô que fará o papel de StandBy, ela seleção é realizada entre os dois robos restantes que não foram selecionados como atacantes. O robo standby é determinado por duas características, estar mais longe da bola e do gol aliado, logo seu objetivo principal será apenas se posicionar de forma mais adequada no campo. Por último o Goleiro é definido por exclusão e provavelmente estará mais perto da marca do gol e mais longe de realizar qualquer ação de ataque.
	
	O Atacante, Goleiro e StandBy terão como objetivo inicial sempre se posicionar de forma adequada em campo e como segundo objetivo direicionar a sua frente para a direção da Bola-> Todos os 3 robos tentarão estar olhando para a bola a qualquer momento do jogo em que não estiverem se locomovendo.
	
	
	**********---LEITURA DA ENTRADA---**********
	
	Para o funcionamento da leitura das informações, logo no inicio do programa,se faz necessário com que seja informada a posição X e Y do gol adversário, a posição X e Y do gol aliado e o Tamanho X e Y do Campo. (NESSA ORDEM) (LEITURA UNICA)
	
	Após essas informações, conforme o decorrer do jogo, se faz necessário que as seguintes posições sejam informadas na ordem descrita:
	Posições X e Y do Robo1->
	Posições X e Y do Robo2->
	Posições X e Y do Robo3->
	Posições X e Y da Bola->
	Posições X e Y do Inimigo1->
	Posições X e Y do Inimigo2->
	Posições X e Y do Inimigo3->
	
	OBS: Cada Iteração de jogada precisará realizar uma leitura.

	**********--- FIM LEITURA DA ENTRADA---**********
	
	***-Lista de funções-***
	
	double Distancia(int x1, int y1, int x2, int y2) //Calcula a distância entre dois pontos.
	
	int DefineAtacante(Robo *Robo1, Robo *Robo2, Robo *Robo3, Bola *Bola, Gol *Gol) //Encontra qual o jogador mais próximo da bola
	
	int DefineStandBy(Robo *Robo1, Robo *Robo2, Bola *Bola, Gol *Gol) //Encontra o Jogador que está mais longe da bola e do Gol (Entre os dois)

	int DefineGoleiro(Robo *Robo1) //Como as outras duas posições já foram tomadas, o último Robo restante sempre será o goleiro
	
	void Core(Robo *Robo1, Robo *Robo2, Robo *Robo3, Bola *Bola, Gol *Gol)
		//A Procedure Core tem como objetivo definir o Papel de cada um dos Robos. Seguindo uma certa lógica de distâncias.
	
	void ExecutaPapel(Robo *Robo, Bola *Bola, Campo *Campo)	//Recebe um ponteiro para uma estrutura do Robo e executa o papel. (Chama sua função)
	
	Void Atacante(Robo *Robo, Bola *Bola, Campo *Campo) //Procedimento que tem como objetivo realizar o controle do Robo definido como Atacante

	void Goleiro(Robo *Robo, Bola *Bola, Campo *Campo) //Procedimento que tem como objetivo realizar o controle do Robo definido como Goleiro

	void StandBy(Robo *Robo, Bola *Bola, Campo *Campo) //Procedimento que tem como objetivo realizar o controle do Robo definido como StandBy
	
	void RecebePosicoes(Robo *Robo1, Robo *Robo2, Robo *Robo3, Bola *Bola Inimigo *Inimigo1, Inimigo *Inimigo2, Inimigo *Inimigo3) 
		//Le da entrada padrão as posições dos robos e da bola
		
	void main() - Joga o jogo.
	
--------------------------------------------------------------------------------------------------------------------------------------------------*/


#include <stdio.h>
#include <math.h>
#include <sdtlib.h>
#define PI 3.14159265358979323846

//Papel = 1; - Atacante
//Papel = 2; - StandBy
//Papel = 3; - Goleiro

typedef struct{			//Essa struct tem como objetivo caracterizar o campo 
	int TamanhoX;		//Tamanho do comprimento do campo
	int TamanhoY;		//Tamanho da Largura do campo 
	Gol *GolAdversario;	//Estrura que representa o Gol adversário
	Gol *GolAliado;		//Estrura que representa o Gol aliado
}Campo;

typedef struct{ //Essa struct tem como objetivo salvar a posição de um determinado robo adversário.
	int PosX; 	//Cada robo terá sua posição X definida dentro de uma struct alocada para o mesmo.
	int PosY; 	//Cada robo terá sua posição Y definida dentro de uma struct alocada para o mesmo.
}Inimigo;

typedef struct{		//Essa struct tem como objetivo salvar a posição de um determinado robo aliado.
	int ID;		//Cada Robo terá sua identificação 1-3
	int PosX; 	//Cada robo terá sua posição X definida dentro de uma struct alocada para o mesmo.
	int PosY; 	//Cada robo terá sua posição Y definida dentro de uma struct alocada para o mesmo.
	int FrenteX;	//Indica a posição X da frente do Robo.
	int FrenteY;	//Indica a posição Y da frente do Robo.
	int Papel;	//Cada robo terá um papel, esse papel será um inteiro entre 1 e 3. Determina qual o comportamento do robo em campo. -Calculado em tempo de execução
	//Papel = 1 - Atacante, Papel = 2 - StandBy, Papel = 3 - Goleiro
}Robo;


typedef struct{
	int PosX;		//A bola tera uma posição X juntamente com uma posição Y
	int PosY;
	int LadoCampo;	//Indicara em qual lado do campo a bola está presente. 0 para aliado 1 para adversário. - Calculado em tempo de execução
}Bola;


typedef struct{ 	//Indica a posição do Gol no campo.
	int PosX;
	int PosY;
}Gol;


double calculaAngulo(double x1, double y1, double x2, double y2, double x3, double y3) //Calcula o ângulo entre dois vetores
{
    double verticeFrenteX, verticeFrenteY, verticeMapaX, verticeMapaY;
    double angulo;
    //Vertice Robo e sua Frente
    verticeFrenteX = x2 - x1;
    verticeFrenteY = y2 - y1;
    
    //Vertice Robo E Ponto do Mapa
    verticeMapaX = x3 - x1;
    verticeMapaY = y3 - y1;
    
    
    angulo = atan2((verticeMapaY - verticeFrenteY),(verticeMapaX - verticeFrenteX));
    
    
    
    return angulo * 180 / PI;
    
}

double Distancia(int x1, int y1, int x2, int y2) //Calcula a distância entre dois pontos. -Pode ser substituído pela função hypot(x2 - x1, y2 - y1);
{
	double square_difference_x = (x2 - x1) * (x2 - x1);
	double square_difference_y = (y2 - y1) * (y2 - y1);
	double sum = square_difference_x + square_difference_y;
	double value = sqrt(sum);
	return value;
}


int DefineAtacante(Robo *Robo1, Robo *Robo2, Robo *Robo3, Bola *Bola, Gol *Gol) //Encontra qual o jogador mais próximo da bola
{
	//Retorna qual o robo que será o atacante para motivos de verificação no Core e determina o valor presente da Struct do robo atacante
	double resultado1, resultado2, resultado3;
	resultado1 = Distancia(Robo1->PosX, Robo1->PosY, Bola->PosX, Bola->PosY);	//Distancia entre o Robo1 e a bola
	resultado2 = Distancia(Robo2->PosX, Robo2->PosY, Bola->PosX, Bola->PosY);	//Distancia entre o Robo2 e a bola
	resultado3 = Distancia(Robo3->PosX, Robo3->PosY, Bola->PosX, Bola->PosY);	//Distancia entre o Robo3 e a bola
	
	//Determina qual o jogador que será o atacante (mais próximo da bola e em posição previlegiada)
	//A última parte do if (Robo1->Posx < Bola->PosX) tem como objetivo detectar se o robo está a frente ou atrás do nível da Bola->
	//Um Robo somente será atacante caso ele esteja em uma posição previlegiada em relação à Bola->
	
	if(resultado1 < resultado2 && resultado1 < resultado3 && Robo1->PosX < Bola->PosX)
	{
		Robo1->Papel = 1;
		return(Robo1->ID); //Retorna qual o robo que será o atacante - Nesse caso são 3 robos em ordem, logo sabemos qual é qual
	}
		
	else if(resultado2 < resultado1 && resultado2 < resultado3 && Robo2->PosX < Bola->PosX)
	{
		Robo2->Papel = 1;
		return(Robo2->ID); //Retorna qual o robo que será o atacante - Nesse caso são 3 robos em ordem, logo sabemos qual é qual
	}
		
	else if(resultado3 < resultado2 && resultado3 < resultado1 && Robo3->PosX < Bola->PosX)
	{
		Robo3->Papel = 1;
		return(Robo3->ID); //Retorna qual o robo que será o atacante - Nesse caso são 3 robos em ordem, logo sabemos qual é qual
	}
	
	else if(resultado1 < resultado2 && resultado1 < resultado3) //Caso não existe nenhum robo atrás do nível da bola, retorno o com a menor distância
	{
		Robo1->Papel = 1;
		return(Robo1->ID); //Retorna qual o robo que será o atacante - Nesse caso são 3 robos em ordem, logo sabemos qual é qual
	}
	
	else if(resultado2 < resultado1 && resultado2 < resultado3) //Caso não existe nenhum robo atrás do nível da bola, retorno o com a menor distância
	{
		Robo2->Papel = 1;
		return(Robo2->ID); //Retorna qual o robo que será o atacante - Nesse caso são 3 robos em ordem, logo sabemos qual é qual
	}
	
	else if(resultado3 < resultado1 && resultado3 < resultado2) //Caso não existe nenhum robo atrás do nível da bola, retorno o com a menor distância
	{
		Robo3->Papel = 1;
		return(Robo3->ID); //Retorna qual o robo que será o atacante - Nesse caso são 3 robos em ordem, logo sabemos qual é qual
	}
	
	else //Caso nenhum caso acima seja verdadeiro por algum motivo qualquer. (Exception)
		Robo1->Papel = 1;
	return(Robo1->ID);
}

//Após a definição do atacante não é necessário definir um papel para o memo robo novamente
int DefineStandBy(Robo *Robo1, Robo *Robo2, Bola *Bola, Gol *Gol) //Encontra o Jogador que está mais longe da bola e do Gol (Entre os dois)
{
	double resultado1, resultado2, DistanciaGol1, DistanciaGol2;
	resultado1    = Distancia(Robo1->PosX, Robo1->PosY, Bola->PosX, Bola->PosY);//Distancia entre o Robo e a bola
	resultado2    = Distancia(Robo2->PosX, Robo2->PosY, Bola->PosX, Bola->PosY);//Distancia entre o Robo e a bola
	DistanciaGol1 = Distancia(Robo1->PosX, Robo1->PosY, Gol.PosX, Gol.PosY);	//Distancia entre o Robo e a Gol
	DistanciaGol2 = Distancia(Robo2->PosX, Robo2->PosY, Gol.PosX, Gol.PosY);	//Distancia entre o Robo e a Gol
	
	//Se a distancia da bola desse robo for maior e sua distancia do gol também for maior
	if(resultado1 > resultado2 && DistanciaGol1 > DistanciaGol2) 
	{
		Robo1->Papel = 2;
		return(Robo1->ID); //Retorna qual o robo que será o StandBy - Como não sabemos qual é o robo que foi passado, lemos sua struct.
	}
	
	//Se a distancia da bola desse robo for maior e sua distancia do gol também for maior	
	else if(resultado2 > resultado1 && DistanciaGol2 > DistanciaGol1)
	{
		Robo2->Papel = 2;
		return(Robo2->ID); //Retorna qual o robo que será o StandBy - Como não sabemos qual é o robo que foi passado, lemos sua struct.
	}
	
	//Se o resultado não for decidido acima, realizarei a comparação de  qual robo está mais longe do gol. (Melhora a qualidade do goleiro)
	else if(DistanciaGol1 > DistanciaGol2)
	{
		Robo1->Papel = 2;
		return(Robo1->ID); //Retorna qual o robo que será o StandBy - Como não sabemos qual é o robo que foi passado, lemos sua struct.
	}
	
	//Se o resultado não for decidido acima, realizarei a comparação de  qual robo está mais longe do gol. (Melhora a qualidade do goleiro)
	else if(DistanciaGol2 > DistanciaGol1)
	{
		Robo2->Papel = 2;
		return(Robo2->ID); //Retorna qual o robo que será o StandBy - Como não sabemos qual é o robo que foi passado, lemos sua struct.
		
	}
	else	//Caso nenhum caso acima seja verdadeiro por algum motivo qualquer. (Exception) (Dois robos exatamente nas mesmas distâncias)
		Robo1->Papel = 2;
	return(Robo1->ID); //Retorna qual o robo que será o StandBy
}


int DefineGoleiro(Robo *Robo1) //Como as outras duas posições já foram tomadas, o último Robo restante sempre será o goleiro
{
	Robo1->Papel = 3;
	return(Robo1->ID); //- Como não sabemos qual é o robo que foi passado, lemos sua struct.
}


//A Procedure Core tem como objetivo definir o Papel de cada um dos Robos. Seguindo uma certa lógica de distâncias.
void Core(Robo *Robo1, Robo *Robo2, Robo *Robo3, Bola *Bola, Gol *Gol)
{
	int auxiliar1, auxiliar2; //Salvam o retorno das funções
	auxiliar1 = DefineAtacante(Robo1, Robo2, Robo3, Bola, Gol);
	
	if(auxiliar1 == 1)						//Se o Atacante foi definido para o Robo 1
	{
		auxiliar2 = DefineStandBy(Robo2, Robo3, Bola, Gol);	//Defino o Robo que fará o papel de StandBy
		if(auxiliar2 == 2)					//Se o Robo2 foi decidido como StandBy
			DefineGoleiro(Robo3);				//Defino o Robo Goleiro
		else		  					//Se o Robo1 foi decidido como StandBy 		
			DefineGoleiro(Robo2);				//Defino o Robo Goleiro
	{
		
	else if(auxiliar1 == 2)						//Se o Atacante foi definido para o Robo 2
	
		auxiliar2 = DefineStandBy(Robo1, Robo3, Bola, Gol); 	//Defino o Robo que fará o papel de StandBy
		if(auxiliar2 == 1)					//Se o Robo1 foi decidido como StandBy
			DefineGoleiro(Robo3);				//Defino o Robo Goleiro
		else		  					//Se o Robo3 foi decidido como StandBy
			DefineGoleiro(Robo1);				//Defino o Robo Goleiro
	
	else if(auxiliar1 == 3)						//Se o Atacante foi definido para o Robo 3
	
		auxiliar2 = DefineStandBy(Robo1, Robo2, Bola, Gol); 	//Defino o Robo que fará o papel de StandBy
		if(auxiliar2 == 1)					//Se o Robo1 foi decidido como StandBy
			DefineGoleiro(Robo2);				//Defino o Robo Goleiro
		else		  					//Se o Robo2 foi decidido como StandBy
			DefineGoleiro(Robo1);				//Defino o Robo Goleiro
	
}


void ExecutaPapel(Robo *Robo, Bola *Bola, Campo *Campo)			//Recebe um ponteiro para uma estrutura do Robo e executa o papel do mesmo
{
	if(Robo.Papel == 1) 		 				//Se o robo for definido como atacante pelo Core
		Atacante(Robo, Bola, Campo);
		
	else if(Robo.Papel == 2) 		 			//Se o robo for definido como Goleiro pelo Core
		StandBy(Robo, Bola, Campo);
		
	else 			   	 						//Se o robo for definido como StandBy pelo Core	
		Goleiro(Robo, Bola, Campo);
}


//As funções abaixo controlarão os robos decidindo suas velocidades e jogadas.
void Atacante(Robo *Robo, Bola *Bola, Campo *Campo) //Procedimento que tem como objetivo realizar o controle do Robo definido como Atacante
{
	if(Bola->PosX < 0 || Bola->PosY < 0) //Bola não está em jogo
		Parar(Robo->ID);
		
	if(Robo->PosX < 0 || Robo->PosY < 0) //Robo não está em jogo
		Parar(Robo->ID);
		
	if(Robo->PosX <= Bola->PosX) //Se o robo estiver atrás do nível da bola
	{
		Parar(Robo->ID);
		Rotacionar(Robo->ID, calculaAngulo(Robo->PosX, Robo->PosY, Robo->FrenteX, Robo->FrenteY, 0, Robo->PosY) //ângulo entre o robo e o fundo do campo.
		MoverNaReta(Robo->ID, 400);
		return;
	}
	
	if(Distancia(Robo->PosX,Robo->PosY, Bola->Posx, Bola->PosY) < 30) //Se o robo estiver perto da bola
	{
		if(Robo->PosY > Bola->PosY) //Se eu estiver a direita da bola giro para a direita
		{
			Parar(Robo->ID);
			Gira(Robo->ID, 1);
		}
		
		if(Robo->PosY < Bola->PosY) //Se eu estiver a esquerda da bola giro para a esquerda
		{
			Parar(Robo->ID);
			Gira(Robo->ID, -1);
		}
		return;
	}
	
	else if (Robo->PosX > Bola->Posx)
	{
		Parar(Robo->ID);
		Rotacionar(Robo->ID, calculaAngulo(Robo->PosX, Robo->PosY, Robo->FrenteX, Robo->FrenteY, Bola->Posx, Bola->PosY) //ângulo entre o robo e a bola.	
		MoverNaReta(Robo->ID, 400);
	}
}


void Goleiro(Robo *Robo, Bola *Bola, Campo *Campo) //Procedimento que tem como objetivo realizar o controle do Robo definido como Goleiro
{
	if(Bola->PosX < 0 || Bola->PosY < 0) //Bola não está em jogo
		Parar(Robo->ID);
		
	if(Robo->PosX < 0 || Robo->PosY < 0) //Robo não está em jogo
		Parar(Robo->ID);
		
	if(Robo->PosX <= Bola->Posx) //Se o robo estiver atrás do nível da bola
	{
		Parar(Robo->ID);
		Rotacionar(Robo->ID, calculaAngulo(Robo->PosX, Robo->PosY, Robo->FrenteX, Robo->FrenteY, 0, Robo->PosY) //ângulo entre o robo e o fundo do campo.
		MoverNaReta(Robo->ID, 400);
		return;
	}
	
	 //Verificando a posição do goleiro, a onde aceitamos 50 unidades de distância como aproximação 
	if (Robo->PosX < Campo->TamanhoX/4 - 50 || Robo->PosX > Campo->TamanhoX/4 + 50 || Robo->PosY < Campo->TamanhoY/2 - 50 || Robo->PosY > Campo->TamanhoY/2 + 50)
	{
		Parar(Robo->ID);
		Rotacionar(Robo->ID, calculaAngulo(Robo->PosX, Robo->PosY, Robo->FrenteX, Robo->FrenteY, Bola->Posx, Bola->PosY; //ângulo entre o robo e a bola.	
		MoverNaReta(Robo->ID, 500);
	}
	
		
	if(Distancia(Robo->PosX,Robo->PosY, Bola->Posx, Bola->PosY) < 30) //Se o robo estiver perto da bola
	{
		if(Robo->PosY > Bola->PosY) //Se eu estiver a direita da bola giro para a direita
		{
			Parar(Robo->ID);
			Gira(Robo->ID, 1);
		}
		
		if(Robo->PosY < Bola->PosY) //Se eu estiver a esquerda da bola giro para a esquerda
		{
			Parar(Robo->ID);
			Gira(Robo->ID, -1);
		}
		return;
	}
	
	else if //Caso a posição esteja correta, apenas verifico a correção entre o ângulo do robo e da bola
	{
		Parar(Robo->ID);
		Rotacionar(Robo->ID, calculaAngulo(Robo->PosX, Robo->PosY, Robo->FrenteX, Robo->FrenteY, Bola->Posx, Bola->PosY); //ângulo entre o robo e a bola.
		Parar(Robo->ID);
	}
}


void StandBy(Robo *Robo, Bola *Bola, Campo *Campo) //Procedimento que tem como objetivo realizar o controle do Robo definido como StandBy
{
	if(Bola->PosX < 0 || Bola->PosY < 0) //Bola não está em jogo
		Parar(Robo->ID);
		
	if(Robo->PosX < 0 || Robo->PosY < 0) //Robo não está em jogo
		Parar(Robo->ID);
		
	if(Robo->PosX <= Bola->Posx) //Se o robo estiver atrás do nível da bola
	{
		Parar(Robo->ID);
		Rotacionar(Robo->ID, calculaAngulo(Robo->PosX, Robo->PosY, Robo->FrenteX, Robo->FrenteY, 0, Robo->PosY) //ângulo entre o robo e o fundo do campo.
		MoverNaReta(Robo->ID, 400);
		return;
	}
	
	if(Robo->PosX <= Campo->TamanhoX/2) //Se o robo a frente do meio de campo
	{
		Parar(Robo->ID);
		Rotacionar(Robo->ID, calculaAngulo(Robo->PosX, Robo->PosY, Robo->FrenteX, Robo->FrenteY, 0, Robo->PosY) //ângulo entre o robo e o fundo do campo.
		MoverNaReta(Robo->ID, 400);
		return;
	}
}

//Le da entrada padrão as posições dos robos e da bola
void RecebePosicoes(Robo *Robo1, Robo *Robo2, Robo *Robo3, Bola *Bola Inimigo *Inimigo1, Inimigo *Inimigo2, Inimigo *Inimigo3) 
{
	//Leitura sempre na seguinte ordem: Robo1, Robo2, Robo3 e Bola->
	scanf("%d %d %d %d", Robo1->PosX, Robo1->PosY, Robo1->FrenteX, Robo1->FrenteY);
	scanf("%d %d %d %d", Robo2->PosX, Robo2->PosY, Robo2->FrenteX, Robo2->FrenteY);
	scanf("%d %d %d %d", Robo3->PosX, Robo3->PosY, Robo3->FrenteX, Robo3->FrenteY);
	scanf("%d %d", Bola->PosX,  Bola->PosY);
	
	//Leitura da posição dos inimigos 
	scanf("%d %d", Inimigo1->PosX, Inimigo1->PosY);
	scanf("%d %d", Inimigo2->PosX, Inimigo2->PosY);
	scanf("%d %d", Inimigo3->PosX, Inimigo3->PosY);
	return;
}


void main()
{
	Gol *GolAdversario, *GolAliado;								//Define a estrutura do Gol.
	GolAdversario = malloc(sizeof(Gol));						//Aloca espaço para o Gol.
	GolAliado     = malloc(sizeof(Gol));						//Aloca espaço para o Gol.
	scanf("%d %d", GolAdversario->PosX,  GolAdversario->PosY); 	//Leitura única e inicial da posição do golAdversario
	scanf("%d %d", GolAliado->PosX,  GolAliado->PosY); 			//Leitura única e inicial da posição do golAliado
	
	Campo *Campo1;										//Define a estrutura do Campo
	Campo1 = malloc(sizeof(Campo));						//Aloca espaço para o Campo
	Campo1->GolAdversario = GolAdversario;				//Salva a estrutura do gol adversário na estrutura do campo
	Campo1->GolAliado     = GolAliado;					//Salva a estrutura do gol aliado na estrutura do campo
	scanf("%d %d", Campo1->TamanhoX,  Campo1->TamanhoY);	//Leitura Unica do tamanho X e Y do Campo. 
	
	
	Inimigo Inimigo1, Inimigo2, Inimigo3;	//Definem as estruturas dos robos inimigos
	Inimigo1 = malloc(sizeof(Inimigo));		//Aloca espaço para o Inimigo1
	Inimigo2 = malloc(sizeof(Inimigo));		//Aloca espaço para o Inimigo2
	Inimigo3 = malloc(sizeof(Inimigo));		//Aloca espaço para o Inimigo3
	
	Robo *Robo1, *Robo2, *Robo3; 			//Definem as estruturas dos robos
	Robo1 = malloc(sizeof(Robo));			//Aloca espaço para o Robo1
	Robo2 = malloc(sizeof(Robo));			//Aloca espaço para o Robo2
	Robo3 = malloc(sizeof(Robo));			//Aloca espaço para o Robo3
	Bola *Bola1;							//Define a estrutura da bola
	Bola1 = malloc(sizeog(Bola));			//Aloca espaço para a Bola
	
	//Defino a identificação dos robos para facilitar sua localização em código.
	Robo1->ID = 1;
	Robo2->ID = 2;
	Robo3->ID = 3;
	
	While(TRUE) //Execução de jogo
	{
		Robo1->Papel = 0;
		Robo2->Papel = 0;
		Robo3->Papel = 0;
		RecebePosicoes(Robo1, Robo2, Robo3, Bola1, Inimigo1, Inimigo2, Inimigo3);  //Recebe as informações da entrada padrão
		core(Robo1, Robo2, Robo3, Bola1, GolAliado); //Modifica as informações presentes nos Robos, determinando suas funções.
		//Executo o papel de cada Robo
		ExecutaPapel(Robo1, Bola1, Campo1);
		ExecutaPapel(Robo2, Bola1, Campo1);
		ExecutaPapel(Robo3, Bola1, Campo1);
		sleep(1000);
	}
		
}






